# PS D:\Steph\repos\MovieRecommender> Set-ExecutionPolicy Unrestricted -Scope Process
# PS D:\Steph\repos\MovieRecommender> .\scripts\initialdbload\venv\Scripts\activate  

import csv
from pydantic import BaseModel
from typing import Optional, List

'''
create tables
    movie
    genre
    etc
populate movie table
for genres
    split genres
    if !contains genres table "genre"
        add genre
add directors to directors
add countries to countries

for each movie in movies
    for each genre in movies.genre
        get genreid
        add movie.id:genre.id
duplicate for directors
duplicate for countries

'''

# This syntax says the class Movie extends the class BaseModel
# The BaseModel class is the "I am a pojo" class. Any fields declared are then automatically 
# expected as constructor params. Constructors in python are just like functions. For example, my_instance = MyClass(field="value")
# Get a field like you would in Java: variable = my_instance.field
# Setting a field is like setting a public field in java: myinstance.field = "value"
class Movie(BaseModel):
    id: int
    title: str
    year: int
    minutes: int


class MovieGenreJoin(BaseModel):
    id1: int
    id2: int


class MovieDirectorJoin(BaseModel):
    id1: int
    id2: int


class MovieCountryJoin(BaseModel):
    id1: int
    id2: int

# Hey look, types! You can specify a variables type by adding ": your type here =" after the name.
# This is just for documentation. Nothing stops you from assigning a different type, but the IDE should warn you
movies_table: List[Movie] = []
genres_table: List[str] = []
directors_table: List[str] = []
countries_table: List[str] = []
movies_genres_table: List[MovieGenreJoin] = []
movies_countries_table: List[MovieCountryJoin] = []
movies_directors_table: List[MovieDirectorJoin] = []

def split_to_table(raw_data, table, join_class, join_table, mov_id):
    data_list: List[str] = raw_data.split(', ')
    for data in data_list:
        if data not in table:
            table.append(data)
        data_id = table.index(data)
        join_row = join_class(
            id1=mov_id,
            id2=data_id
        )
        join_table.append(join_row)

with open('ratedmoviesfull.csv', encoding='utf-8') as csvfile:
    moviereader = csv.reader(csvfile, delimiter=',', quotechar='"')
    next(moviereader) # Reads first row
    for movie_id, title, year, country_raw, genre_raw, director_raw, minutes, poster in moviereader:
        movie_id = int(movie_id)
        year = int(year)
        minutes = int(minutes)
        movie = Movie(
            id=movie_id,
            title=title,
            year=year,
            minutes=minutes
        )

        genres: List[str] = genre_raw.split(', ')
        for genre in genres:
            if genre not in genres_table:
                genres_table.append(genre)

            genre_id = genres_table.index(genre)
            join_row = MovieGenreJoin(
                id1=movie_id,
                id2=genre_id
            )
            movies_genres_table.append(join_row)
        
        directors: List[str] = director_raw.split(', ')
        for director in directors:
            if director not in directors_table:
                directors_table.append(director)
            director_id = directors_table.index(director)
            join_directors_row = MovieDirectorJoin(
                id1=movie_id,
                id2=director_id
            )
            movies_directors_table.append(join_directors_row)
        # countries: List[str] = country_raw.split(', ')
        # for country in countries:
        #     if country not in countries_table:
        #         countries_table.append(country)
        #     country_id = countries_table.index(country)
        #     join_countries_row = MovieCountryJoin(
        #         movie_id=movie_id,
        #         country_id=country_id
        #     )
        #     movies_countries_table.append(join_countries_row)
        split_to_table(country_raw, countries_table, MovieCountryJoin, countries_table, movie_id)




# with open('moviegenrejoin.txt', 'w') as csv_file:
#     writer = csv.writer(csv_file, delimiter=',')
#     writer.writerow(['movie_id','genre_id'])
#     rowslist = []
#     for MovieGenreJoin in movies_genres_table:
#         cellslist = []
#         cellslist.append(MovieGenreJoin.movie_id)
#         cellslist.append(MovieGenreJoin.genre_id)
#         rowslist.append(cellslist)
#     writer.writerows(rowslist)

def normalize_to_csv(filename, header_1, header_2, join_class, join_table):
    with open(filename, 'w') as csv_file:
        writer = csv.writer(csv_file, delimiter=',')
        headers = [header_1, header_2]
        writer.writerow(headers)
        rows = []
        for join_class in join_table:
            dict_values = join_class.dict().values()
            value_list = []
            for value in dict_values:
                value_list.append(value)
            rows.append(value_list)
        writer.writerows(rows)

normalize_to_csv('moviedirectorjoin.txt', 'movie_id', 'director_id', MovieDirectorJoin, movies_directors_table)
normalize_to_csv('moviegenrejoin.txt', 'movie_id', 'director_id', MovieGenreJoin, movies_genres_table)
normalize_to_csv('moviecountryjoin.txt', 'movie_id', 'country_id', MovieCountryJoin, movies_countries_table)